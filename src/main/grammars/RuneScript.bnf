{
  parserClass="io.runescript.plugin.lang.parser.RsParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rs"
  psiImplClassSuffix="Impl"
  psiPackage="io.runescript.plugin.lang.psi"
  psiImplPackage="io.runescript.plugin.lang.psi.impl"
  psiImplUtilClass="io.runescript.plugin.lang.psi.RsPsiImplUtil"
  parserUtilClass="io.runescript.plugin.lang.parser.RsParserUtil"
  elementTypeHolderClass="io.runescript.plugin.lang.psi.RsElementTypes"
  elementTypeClass="io.runescript.plugin.lang.psi.RsElementType"
  tokenTypeClass="io.runescript.plugin.lang.psi.RsElementType"
  generateTokenAccessors=true
  name(".*Expression")='Expression'
  extends(".*Expression")=Expression
  name(".*Statement")='Statement'
  extends(".*Statement")=Statement
  elementType("Arithmetic(BitwiseOr|BitwiseAnd|Additive|Multiplicative)Expression")=ArithmeticExpression
  elementType("Arithmetic(BitwiseOr|BitwiseAnd|Additive|Multiplicative)Operator")=ArithmeticOp
  elementType("(LogicalAnd|LogicalOr|Compare)Expression")=ConditionExpression
  elementType("(LogicalAnd|LogicalOr|Compare)Operator")=ConditionOp
  elementType("(Prefix|Postfix)Operator")=UnaryOp

  implements("Script")="io.runescript.plugin.lang.psi.RsControlFlowHolder"
  implements("Script")="io.runescript.plugin.lang.psi.RsNamedElement"
  implements("Script|HookFragment")="io.runescript.plugin.lang.psi.type.inference.RsInferenceDataHolder"
  classHeader="// This class is automatically generated. Do not edit."
  parserImports=[
    "static com.intellij.lang.WhitespacesBinders.*"
  ]
  tokens=[
    LBRACKET='['
    RBRACKET=']'
    LPAREN='('
    RPAREN=')'
    LBRACE='{'
    RBRACE='}'
    COMMA=','
    COLON=':'
    SEMICOLON=';'
    EQUAL='='
    EXCEL='!'
    GT='>'
    LT='<'
    GTE='>='
    LTE='<='
    BAR='|'
    AMPERSAND='&'
    PLUS='+'
    MINUS='-'
    STAR='*'
    SLASH='/'
    PERCENT='%'
    CARET='^'
    TILDE='~'
    DOLLAR='$'
  ]
}

File ::= Script*

Script ::= '[' NameLiteral ',' NameLiteral ']' ParameterList? ReturnList? StatementList {
    hooks=[
        leftBinder="SCRIPT_LEFT_BINDER"
        rightBinder="SCRIPT_RIGHT_BINDER"
    ]
    stubClass="io.runescript.plugin.lang.stubs.RsScriptStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    implements="com.intellij.psi.NavigatablePsiElement"
    mixin="io.runescript.plugin.lang.psi.mixin.RsScriptMixin"
}

ParameterList ::= '(' (Parameter (',' Parameter)*)? ')' {
    mixin="io.runescript.plugin.lang.psi.mixin.RsParameterListMixin"
    stubClass="io.runescript.plugin.lang.stubs.RsParameterListStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

Parameter ::= (TypeName | ARRAY_TYPE_LITERAL) LocalVariableExpression {
    stubClass="io.runescript.plugin.lang.stubs.RsParameterStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    pin=1
    recoverWhile=Parameter_Recover
}

private Parameter_Recover ::= !(COMMA | RPAREN)

ReturnList ::= '(' (TypeName (',' TypeName)*)? ')' {
    stubClass="io.runescript.plugin.lang.stubs.RsReturnListStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

TypeName ::= TYPE_LITERAL {
    stubClass="io.runescript.plugin.lang.stubs.RsTypeNameStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}
StatementList ::= Statement* {
    mixin="io.runescript.plugin.lang.psi.mixin.RsStatementListMixin"
    hooks=[
        leftBinder="GREEDY_LEFT_BINDER"
    ]
}
Statement ::= BlockStatement
            | IfStatement
            | WhileStatement
            | SwitchStatement
            | ReturnStatement
            | ArrayVariableDeclarationStatement
            | LocalVariableDeclarationStatement
            | AssignmentStatement
            | ExpressionStatement
            | EmptyStatement

BlockStatement ::= '{' StatementList '}'
IfStatement ::= IF '(' LogicalOrWrapper ')' Statement (ELSE Statement)? {
    pin=2
    methods=[
        trueStatement="/Statement[0]"
        falseStatement="/Statement[1]"
    ]
}
WhileStatement ::= WHILE '(' LogicalOrWrapper ')' Statement {
    pin=2
}
SwitchStatement ::= SWITCH '(' Expression ')' '{' SwitchCase* '}' {
    pin=2
}
SwitchCase ::= CASE SwitchCaseExpressionList ':' StatementList
private SwitchCaseExpressionList ::= SwitchCaseExpression (',' SwitchCaseExpression)*
private SwitchCaseExpression ::= SwitchCaseDefaultExpression | Expression
SwitchCaseDefaultExpression ::= DEFAULT

ReturnStatement ::= RETURN ('(' ExpressionList? ')')? ';' {
    pin=1
}

LocalVariableDeclarationStatement ::= DEFINE_TYPE LocalVariableExpression ('=' Expression)? ';' {
    pin=1
    mixin="io.runescript.plugin.lang.psi.mixin.RsLocalVariableDeclarationStatementMixin"
    methods=[
        variable="/LocalVariableExpression"
        initializer="/Expression[1]"
    ]
}

ArrayVariableDeclarationStatement ::= DEFINE_TYPE LocalVariableExpression '(' Expression ')' ';' {
    pin=3
    mixin="io.runescript.plugin.lang.psi.mixin.RsArrayVariableDeclarationStatementMixin"
}

AssignmentStatement ::= AssignableExpression (',' AssignableExpression)* '=' Expression (',' Expression)* ';' {
    pin=3
}

private AssignableExpression ::= ArrayAccessExpression | LocalVariableExpression | ScopedVariableExpression
ExpressionStatement ::= Expression ';' {
    pin=1
}
EmptyStatement ::= ';'

// Arithmetic & Bitwise Expressions

fake ArithmeticExpression ::= Expression ArithmeticOp Expression {
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
    implements="RsBinaryExpression"
}

//noinspection BnfUnusedRule
fake ArithmeticOp ::= '+' | '-' | '*' | '/' | '%' | '|' | '&'

private ArithmeticBitwiseOrWrapper ::= ArithmeticBitwiseAndWrapper ArithmeticBitwiseOrExpression*
left ArithmeticBitwiseOrExpression ::= ArithmeticBitwiseOrOperator ArithmeticBitwiseAndWrapper
ArithmeticBitwiseOrOperator ::= '|'

private ArithmeticBitwiseAndWrapper ::= ArithmeticAdditiveWrapper ArithmeticBitwiseAndExpression*
left ArithmeticBitwiseAndExpression ::= ArithmeticBitwiseAndOperator ArithmeticAdditiveWrapper
ArithmeticBitwiseAndOperator ::= '&'

private ArithmeticAdditiveWrapper ::= ArithmeticMultiplicativeWrapper ArithmeticAdditiveExpression*
left ArithmeticAdditiveExpression ::= ArithmeticAdditiveOperator ArithmeticMultiplicativeWrapper
ArithmeticAdditiveOperator ::= '+' | '-'

private ArithmeticMultiplicativeWrapper ::= ArithmeticValueExpression ArithmeticMultiplicativeExpression*
left ArithmeticMultiplicativeExpression ::= ArithmeticMultiplicativeOperator ArithmeticValueExpression
ArithmeticMultiplicativeOperator ::= '*' | '/' | '%'

ArithmeticValueExpression ::= ('(' ArithmeticBitwiseOrWrapper ')') | Expression

// Condition Expressions

fake ConditionExpression ::= Expression ConditionOp Expression {
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
    implements="RsBinaryExpression"
}

//noinspection BnfUnusedRule
fake ConditionOp ::= '|' | '&' | '!' | '>' | '<' | '>=' | '<=' | '='

private LogicalOrWrapper ::= LogicalAndWrapper LogicalOrExpression*
left LogicalOrExpression ::= LogicalOrOperator LogicalAndWrapper
LogicalOrOperator ::= '|'

private LogicalAndWrapper ::= CompareExpressionWrapper LogicalAndExpression*
left LogicalAndExpression ::= LogicalAndOperator CompareExpressionWrapper
LogicalAndOperator ::= '&'

private CompareExpressionWrapper ::= RelationalValueExpression CompareExpression?
left CompareExpression ::= CompareOperator RelationalValueExpression
CompareOperator ::= '!' | '>' | '<' | '>=' | '<=' | '='

RelationalValueExpression ::= ('(' LogicalOrWrapper ')') | Expression

// Unary Expressions

//noinspection BnfUnusedRule

fake UnaryOp ::= '++' | '--'
PrefixOperator ::= '++' | '--'
PostfixOperator ::= '++' | '--'

private FixExprOperand::= ArrayAccessExpression | LocalVariableExpression | ScopedVariableExpression

PrefixExpression ::= PrefixOperator FixExprOperand {
    implements="RsUnaryExpression"
}

PostfixExpression ::= FixExprOperand PostfixOperator {
    implements="RsUnaryExpression"
}


// General Expressions

Expression ::= ParExpression
             | PostfixExpression
             | PrefixExpression
             | ArrayAccessExpression
             | LocalVariableExpression
             | ScopedVariableExpression
             | LiteralExpression
             | CommandExpression
             | GosubExpression
             | ConstantExpression
             | DynamicExpression
             | CalcExpression

private ExpressionList ::= Expression (',' Expression)*
ParExpression ::= '(' Expression ')'

LocalVariableExpression ::= '$' NameLiteral {
    mixin="io.runescript.plugin.lang.psi.mixin.RsLocalVariableExpressionMixin"
    stubClass="io.runescript.plugin.lang.stubs.RsLocalVariableExpressionStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}

ArrayAccessExpression ::= LocalVariableExpression '(' Expression ')'
ScopedVariableExpression ::= '%' NameLiteral {
    mixin="io.runescript.plugin.lang.psi.mixin.RsScopedVariableExpressionMixin"
    stubClass="io.runescript.plugin.lang.stubs.RsScopedVariableExpressionStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}

private LiteralExpression ::= IntegerLiteralExpression
                             | LongLiteralExpression
                             | CoordLiteralExpression
                             | BooleanLiteralExpression
                             | NullLiteralExpression
                             | StringLiteralExpression
IntegerLiteralExpression ::= INTEGER
LongLiteralExpression ::= LONG
CoordLiteralExpression ::= COORDGRID
BooleanLiteralExpression ::= TRUE | FALSE
NullLiteralExpression ::= NULL
StringLiteralExpression ::= STRING_START StringLiteralContent STRING_END {
    mixin=" io.runescript.plugin.lang.psi.mixin.RsStringLiteralExpressionMixin"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}
StringLiteralContent ::= (STRING_PART | STRING_TAG | StringInterpolationExpression)* {
    mixin=" io.runescript.plugin.lang.psi.mixin.RsStringLiteralContentMixin"
    implements="com.intellij.psi.PsiLanguageInjectionHost"
}

StringInterpolationExpression ::= STRING_INTERPOLATION_START Expression STRING_INTERPOLATION_END
CommandExpression ::= NameLiteral ArgumentList {
    implements="com.intellij.psi.NavigatablePsiElement"
    mixin=" io.runescript.plugin.lang.psi.mixin.RsCommandExpressionMixin"
}
GosubExpression ::= '~' NameLiteral ArgumentList? {
    mixin="io.runescript.plugin.lang.psi.mixin.RsGosubExpressionMixin"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}
ArgumentList ::= '(' ExpressionList? ')'
ConstantExpression ::= '^' NameLiteral {
    mixin="io.runescript.plugin.lang.psi.mixin.RsConstantExpressionMixin"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}
DynamicExpression ::= NameLiteral {
    mixin="io.runescript.plugin.lang.psi.mixin.RsDynamicExpressionMixin"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}
CalcExpression ::= CALC '(' ArithmeticBitwiseOrWrapper ')'
NameLiteral ::= IDENTIFIER | DEFINE_TYPE | TYPE_LITERAL | ARRAY_TYPE_LITERAL | WHILE | IF | TRUE | FALSE | NULL | SWITCH {
    stubClass="io.runescript.plugin.lang.stubs.RsNameLiteralStub"
    elementTypeFactory = "io.runescript.plugin.lang.stubs.StubElementTypeFactory.create"
}

HookRoot ::= HookFragment {
    extraRoot=true
}

HookFragment ::= NameLiteral ArgumentList? HookTransmitList? {
    mixin="io.runescript.plugin.lang.psi.mixin.RsHookFragmentMixin"
    implements="io.runescript.plugin.lang.psi.RsNamedElement"
}
HookTransmitList ::= LBRACE ExpressionList? RBRACE